.TH "FI_DIRECT" 7 "2014-07-25" "libfabric" "Libfabric Programmer's Manual" libfabric
.SH NAME
Direct fabric provider access
.SH SYNOPSIS
.B -DFABRIC_DIRECT
.PP
.B #define FABRIC_DIRECT
.PP
Fabric direct provides a mechanism for applications to compile against
a specific fabric providers without going through the libfabric
framework or function vector tables.  This allows for extreme optimization
via function inlining at the cost of supporting multiple providers or
different versions of the same provider.
.SH DESCRIPTION
The use of fabric direct is intended only for applications that require
the absolute minimum software latency, and are willing to re-compile
for specific fabric hardware.  Providers that support fabric direct
implement their own versions of the static inline calls which are define
in the libfabric header files, define selected enum values, and provide
defines for compile-time optimizations.  Applications can then code against
the standard libfabric calls, but link directly against the provider calls by
defining FABRIC_DIRECT as part of their build.
.PP
In general, the use of fabric direct does not require application source
code changes, and, instead, is limited to the build process.
.PP
Providers supporting fabric direct must install 'direct' versions of all
libfabric header files.  For convenience, the libfabric sources contain
sample header files that may be modified by a provider.  The 'direct'
header file names have 'fi_direct' as their prefix: fi_direct.h, 
fi_direct_endpoint.h, etc.
.PP
Direct providers are prohibited from overriding or modifying existing
data structures.  However, provider specific extensions are still available.
In addition to provider direct function calls to provider code, a fabric
direct provider may define zero of more of the following capability
definitions.  Applications can check for these capabilities in order to
optimize code paths at compile time, versus relying on run-time checks.
.SH "CAPABILITY DEFINITIONS"
In order that application code may be optimized during compile time, direct
providers must provide definitions for various capabilities, if those
capabilities are supported.  The following #define values may be used
by an application to test for provider support of supported features.
.IP "FI_DIRECT_WRITE_COHERENT"
The provider sets FI_WRITE_COHERENT for fi_info:domain_cap.  See fi_getinfo
for additional details.
.IP "FI_DIRECT_CONTEXT"
The provider sets FI_CONTEXT for fi_info:domain_cap.  See fi_getinfo
for additional details.
.IP "FI_DIRECT_LOCAL_MR"
The provider sets FI_LOCAL_MR for fi_info:domain_cap.  See fi_getinfo
for additional details.
.IP "FI_DIRECT_USER_MR_KEY"
The provider sets FI_USER_MR_KEY for fi_info:domain_cap.  See fi_getinfo
for additional details.
.IP "FI_DIRECT_DYNAMIC_MR"
The provider sets FI_DYNAMIC_MR for fi_info:domain_cap.  See fi_getinfo
for additional details.
.SH "OPTIONAL FUNCTIONS"
The checks for the availability of following optional functions are made
using macros. The provider is required to define in such a manner that they
evaluate to either 0 or 1 at compile time. When the function is available,
the macro evaluates to 1, and when the function is not available, the macro
evaluates to 0.
.IP "FI_INJECT_MSG"
Indicates that the provider supports the inject functions for message 
data transfers for connected mode endpoints. See fi_msg for additional 
details.
.IP "FI_INJECT_MSGTO"
Similar to FI_INJECT_MSG, but for unconnected endpoints.
.IP "FI_TINJECT"
Indicates that the provider supports the inject functions for tagged message 
data transfers for connected mode endpoints.
See fi_tagged for additional details.
.IP "FI_TINJECTTO"
Similar to FI_TINJECT, but for unconnected endpoints.
.IP "FI_INJECT_WRITE"
Indicates that the provider supports the inject functions for RMA 
data transfers for connected mode endpoints.
See fi_rma for additional details.
.IP "FI_INJECT_WRITETO"
Similar to FI_INJECT_WRITE, but for unconnected endpoints.
.IP "FI_INJECT_ATOMIC"
Indicates that the provider supports the inject functions for atomic
data transfers for connected mode endpoints.
See fi_atomic for additional details.
.IP "FI_INJECT_ATOMICTO"
Similar to FI_INJECT_ATOMIC, but for unconnected endpoints.
.IP "FI_EQ_READFROM"
Indicates that the provider supports the fi_eq_readfrom function on 
event queues.  See fi_eq for additional details.
.IP "FI_EQ_CONDREADFROM"
Indicates that the provider supports the fi_eq_condreadfrom function 
on event queues.  See fi_eq for additional details.
.SH "SEE ALSO"
fi_getinfo(3), fi_endpoint(3), fi_domain(3)
