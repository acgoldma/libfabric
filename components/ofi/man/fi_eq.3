.TH "FI_EQ" 3 "2014-05-07" "libfabric" "Libfabric Programmer's Manual" libfabric
.SH NAME
fi_eq \- Event queue operations
.PP
fi_eq_open / fi_eq_close
.RS
Open/close an event queue
.RE
.PP
fi_eq_read / fi_eq_readfrom / fi_eq_readerr
.RS
Reads an event from an event queue
.RE
.PP
fi_eq_write
.RS
Writes an event to an event queue
.RE
.PP
fi_eq_condread / fi_eq_condreadfrom
.RS
Waits until the specified condition has been met before reading an event
from an event queue.
.RE
.PP
fi_eq_strerror
.RS
Converts provider specific error information into a printable string
.RE
.SH SYNOPSIS
.B #include <rdma/fi_domain.h>
.HP
.BI "int fi_eq_open(struct fid_domain *" domain ", struct fi_eq_attr *" attr ", "
.BI "struct fid_eq **" eq ", void * " context ");"
.HP
.BI "int fi_eq_close(struct fid_eq *" eq ");"
.HP
.BI "int fi_eq_control(struct fid_eq *" eq ", int " command ", void *" arg ");"
.PP
.HP
.BI "int fi_eq_read(struct fid_eq *" eq ","
.BI "void *" buf ", size_t " len ");"
.HP
.BI "int fi_eq_readfrom(struct fid_eq *" eq ","
.BI "void *" buf ", size_t " len ", "
.BI "void *" src_addr ", size_t *" addrlen ");"
.HP
.BI "int fi_eq_readerr(struct fid_eq *" eq ","
.BI "struct fi_eq_err_entry *" buf ", size_t " len ", "
.BI "uint64_t " flags ");"
.PP
.HP
.BI "int fi_eq_write(struct fid_eq *" eq ","
.BI "const void *" buf ", size_t " len ");"
.PP
.HP
.BI "int fi_eq_reset(struct fid_eq *" eq ", const void *" cond ");"
.HP
.BI "int fi_eq_condread(struct fid_eq *" eq ","
.BI "void *" buf ", size_t " len ", "
.BI "const void *" cond ");"
.HP
.BI "int fi_eq_condreadfrom(struct fid_eq *" eq ","
.BI "void *" buf ", size_t " len ","
.BI "void *" src_addr ", size_t *" addrlen ", const void *" cond ");"
.PP
.HP
.BI "const char * fi_eq_strerror(struct fid_eq *" eq ", int " prov_errno ", "
.BI "const void *" prov_data ", void *" buf ", size_t" len ");"
.SH ARGUMENTS
.IP "eq"
Event queue 
.IP "attr"
Event queue attributes
.IP "context"
User specified context associated with the event queue.
.IP "buf"
For read calls, the data buffer to write events into.
.br
For write calls, an event to insert into the event queue.
.br
For fi_eq_strerror, an optional buffer that receives printable error information.
.IP "len"
Length of data buffer
.IP "src_addr"
Source address of a completed receive operation
.IP "addrlen"
Size of source address buffer
.IP "flags"
Additional flags to apply to the operation
.IP "cond"
Condition that must be met before an event is generated
.IP "prov_errno"
Provider specific error value
.IP "prov_data"
Provider specific data related to a completion
.SH "DESCRIPTION"
.SS "fi_eq_open"
fi_eq_open allocates a new event queue.  The properties and behavior of
the event queue are defined by struct fi_eq_attr.
.PP
.nf
struct fi_eq_attr {
	int                  mask;      /* valid attr fields */
	enum fi_eq_domain    domain;    /* events reported by EQ */
	enum fi_eq_format    format;    /* event format */
	enum fi_eq_wait_obj  wait_obj;  /* requested wait object */
	enum fi_eq_wait_cond wait_cond; /* wait condition format */
	size_t               size;      /* # entries for EQ */
	int                  signaling_vector; /* interrupt affinity */
	uint64_t             flags;     /* operation flags */
	void                *cond;      /* wait condition */
};
.fi
.IP "mask"
The mask field is used for forward and backward API compatibility.  It is
used by the application to indicate which fields in the attribute structure
have been set.  For this version of the API, mask should be set to
FI_EQ_ATTR_MASK_V1, indicating that all specified fields have been initialized.
.IP "domain"
An EQ domain indicates the type of events which are to be reported through
the event queue.  Valid values are:
.RS
.IP "FI_EQ_DOMAIN_GENERAL"
The EQ is used to report asynchronous events affiliated with a fabric
or access domain.
.IP "FI_EQ_DOMAIN_COMP"
The EQ is used to report asynchronous completions of data transfers.
.IP "FI_EQ_DOMAIN_CM"
The EQ will be used to report connection management events.
.IP "FI_EQ_DOMAIN_AV"
The EQ will report asynchronous operations associated with address vectors.
.RE
.IP "format"
Event queues allow the application to select the amount of detail that it
must store and report.  The format attribute allows the application to
select one of several event formats, indicating the structure of the data
that the event queue should return when read.  Supported formats and the
structures that correspond to each are listed below.
.RS
.IP "FI_EQ_FORMAT_UNSPEC"
If an unspecified format is requested, then the EQ will use the default
format associated with the EQ based on the selected domain and type.
.IP "FI_EQ_FORMAT_CONTEXT"
Provides only user specified context that was associated with the event.
.nf

struct fi_eq_entry {
	void *op_context; /* operation context */
};
.fi
.IP "FI_EQ_FORMAT_COMP"
Provides minimal data for processing completions.
.nf

struct fi_eq_comp_entry {
	void    *op_context; /* operation context */
	uint64_t flags;      /* completion flags */
	size_t   len;        /* size of received data */
};
.fi
.IP "FI_EQ_FORMAT_DATA"
Provides data associated with a completion.
.nf

struct fi_eq_data_entry {
	void    *op_context; /* operation context */
	void    *buf;        /* receive data buffer */
	uint64_t flags;      /* completion flags */
	size_t   len;        /* size of received data */
	uint64_t data;       /* completion data */
};
.fi
.IP "FI_EQ_FORMAT_TAGGED"
Reports completion data when using fi_tagged operations.
.nf

struct fi_eq_tagged_entry {
	void    *op_context; /* operation context */
	void    *buf;        /* receive data buffer */
	uint64_t flags;      /* completion flags */
	size_t   len;        /* size of received data */
	uint64_t data;       /* completion data */
	uint64_t tag;        /* received tag */
};
.fi
.IP "FI_EQ_FORMAT_CM"
Provides information on connection management.
.nf

struct fi_eq_cm_entry {
	void            *fid_context; /* endpoint context */
	uint64_t         flags;       /* connection flags */
	enum fi_cm_event event;       /* CM event */
	struct fi_info *info;         /* endpoint info */
	uint8_t         data[0];      /* user data */
};

.fi
Available CM events are FI_CONNREQ, FI_CONNECTED, FI_SHUTDOWN.  For
FI_CONNREQ, the info field will provide additional details on the request.
Users must call fi_freeinfo on info to release the structure.
.sp
If the underlying connection protocol supports exchanging user data as
part of the connection establish, the data field will contain any
available user CM data.  ECs that report CM events return a single event
per read request.
.RE
.IP "wait_obj"
EQ's may be associated with a specific wait object.  Wait objects allow
applications to block until the wait object is signaled, indicating that
an event is available to be read.  Users may use fi_control to retrieve
the underlying wait object associated with an EQ, in order to use it in
other system calls.  The following values may be used to specify the type
of wait object associated with an EQ: FI_EQ_WAIT_NONE and FI_EQ_WAIT_FD.
.IP "wait_cond"
By default, when an event is inserted into an EQ, the corresponding wait
object, if any, is signaled.  Users may specify a condition that must
first be met before the wait is satisfied.  This field indicates how the
provider should interpret the cond field, which describes the condition
needed to signal the wait object.
.sp
If wait_cond is set to FI_EQ_COND_NONE, then no additional conditions
are applied to the signaling of the EQ wait object.  If wait_cond is
set to FI_EQ_COND_THRESHOLD, then the cond field is interpreted as a size_t
threshold value.  The threshold indicates the number of entries that must
be added to an EQ before the wait object is signaled.
.sp
This field is ignored if wait_obj is set to FI_EQ_WAIT_NONE.
.IP "size"
Specifies the size of an event queue.
.IP "signaling_vector"
Indicates which processor core interrupts associated with the EQ should
target.
.IP "flags"
Flags that set the default operation of the EQ.
.RS
.IP "FI_AUTO_RESET"
Automatically resets the EQ to signal the wait object after the EQ has
been read.  Once an EQ has been signaled, it does not reset until all
queued events have been read.  Once reset, the EQ will trigger the wait
object when a new entry is added, unless the EQ has been configured with
a wait condition.  In the latter case, the EQ will be reset to signal
again once the condition has been satisfied.
.IP "FI_REMOTE_SIGNAL"
If specified, this indicates that the EQ will only signal its wait object
upon receiving a remote operation with FI_REMOTE_SIGNAL set, provided that all
other wait conditions have been met.  The use of FI_REMOTE_SIGNAL may
improve system utilization by deferring processing of an EQ until a remote
endpoint has completed all necessary operations.
.RE
.IP "cond"
Points to a datatype or structure describing a wait condition that must be
satisfied before the EQ wait object is signaled.  The format of the data
referenced by the cond field is determined by the value set by the wait_cond
field.
.SS "fi_eq_close"
The fi_eq_close call releases all resources associated with an event
queue.  The EQ must not be bound to any other resources prior to
being closed.  Any events which remain on the EQ when it is closed are
lost.
.SS "fi_eq_control"
The fi_eq_control call is used to access provider or implementation specific
details of the event queue.  Access to the EQ should be serialized
across all calls when fi_eq_control is invoked, as it may redirect the
implementation of EQ operations.  The following control commands are usable
with an EQ.
.IP "FI_GETOPSFLAG (uint64_t *)"
Returns the current default operational flags associated with the EQ.
.IP "FI_SETOPSFLAG (uint64_t *)"
Modifies the current default operational flags associated with the EQ.
Operational flags affected by fi_eq_control are: FI_AUTO_RESET.
.IP "FI_GETWAIT (void **)"
This command allows the user to retrieve the low-level wait object
associated with the EQ.  The format of the wait-object is specified during
EQ creation, through the EQ attributes.  The fi_eq_control arg parameter
should be an address where a pointer to the returned wait object
will be written.
.SS "fi_eq_read"
The fi_eq_read, fi_eq_readfrom, fi_eq_condread, fi_eq_condreadfrom reads
event data from the EQ.  The format of the event data is based on the user
specified options when the EQ was opened.  Multiple events may be retrieved
from an EQ in a single call, provided that sufficient buffer space was
provided.  The number of bytes successfully read from the EQ is returned
by the read call.
.PP
The readfrom calls allow the EQ to return source address information to
the user for any received data.  The format and size of the source address
is a property of the associated resource domain.  See the addr_format
field of struct fi_into when calling fi_domain.  Note that returning source
address information may require that the provider perform address
translation and/or look-up in order to provide the requested data, which
may adversely affect performance.
.PP
The condread calls allow the user to specify and change the wait condition
of an EQ.  Otherwise, they behave similar to the read / readfrom calls.
.PP
Reading non-error events from an EQ will block if the EQ has been configured
with FI_BLOCK, a wait object is associated with the EQ, and the wait object
has been reset to the non-signaled state.
.PP
EQs are optimized to report operations which have completed successfully.
Operations which fail are reported 'out of band'.  Such operations are
retrieved using the fi_eq_readerr function.  When an operation
that completes with an unexpected error is inserted
into an EQ, it is placed into a temporary error queue.  Attempting to read
from an EQ while an item is in the error queue results in an FI_EAVAIL
failure.  Applications may use this return code to determine when to
call fi_eq_readerr.
.PP
If an EQ has not been configured with FI_AUTORESET, once the wait object
of an EQ has been signaled, it will not be signaled again until the EQ
has been rearmed.  The fi_eq_reset call is used to manually rearm the EQ
to signal its wait object when its wait condition has been met.
.SS "fi_eq_readerr"
The read error function, fi_eq_readerr, retrieves information regarding
any asynchronous operation which has completed with an unexpected error.
fi_eq_readerr is a non-blocking call, returning immediately whether an
error completion was found or not.
.PP
Error information is reported to the user through struct fi_eq_err_entry.
The format of this structure is defined below.
.nf

struct fi_eq_err_entry {
	void    *op_context;  /* operation context */
	union {
		void *fid_context;/* endpoint context */
		void *buf;        /* receive data buffer */
	};
	uint64_t flags;       /* completion flags */
	size_t   len;         /* size of received data */
	uint64_t data;        /* completion data */
	uint64_t tag;         /* message tag */
	size_t   olen;        /* overflow length */
	int      err;         /* positive error code */
	int      prov_errno;  /* provider error code */
	void    *prov_data;   /* provider error data */
};

.fi
The general reason for the error is provided through the err field.  Provider
specific error information may also be available through the prov_errno
and prov_data fields.  Users may call fi_eq_strerror to convert provider
specific error information into a printable string for debugging purposes.
.SH "RETURN VALUES"
fi_eq_open / fi_eq_reset
.RS
Returns 0 on success.  On error, a negative value corresponding to
fabric errno is returned.
.RE
.PP
fi_eq_read / fi_eq_readfrom / fi_eq_readerr
.br
fi_eq_condread / fi_eq_condreadfrom
.br
fi_eq_write
.RS
On success, returns the number of bytes read from or written to the event
queue.  On error, a negative value corresponding to fabric errno
is returned.
.RE
.PP
fi_eq_strerror
.RS
Returns a character string interpretation of the provider specific error
returned with a completion.
.RE
.PP
Fabric errno values are defined in
.IR "rdma/fi_errno.h".
.SH "NOTES"
.SH "SEE ALSO"
fi_getinfo(3), fi_endpoint(3), fi_domain(3), fi_cntr(3)
